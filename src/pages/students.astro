---
// Style Imports
import '../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/pixelify-sans';
import '@fontsource/ibm-plex-mono';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';
import '@fontsource/spectral';
import '@fontsource/crimson-pro';
import '@fontsource/alfa-slab-one';

// common.min.css is distributed with agnostic-react
// and agnostic-svelte too. But, since we're using all
// of these together, we only need to import global CSS
// once and in one place.
// common.min.css combines properties, resets, utilities
// import "agnostic-vue/dist/common.min.css";
// But!! Rob much prefers individual modular import ;)
import "agnostic-vue/dist/common.properties.min.css";
import "agnostic-vue/dist/common.resets.min.css";
import "agnostic-vue/dist/common.utilities.min.css";
import "agnostic-vue/dist/opinions.min.css";

// Component Imports
import "agnostic-vue/dist/index.css";

// Read from content collection
import { getCollection } from 'astro:content';
import Crumbs from "../components/Crumbs.vue"
import ProjectSearch from '../components/ProjectSearch.vue';
import TAPDefaultLayout from "../layouts/default.astro";

export async function getStaticPaths() {
  const projects = await getCollection('projects');  
  let slugs = new Array();

  
  // New algorithm: find unique tech combinations
  let projectStudent = {};
  projects.forEach(project => {
    project.data.students.forEach(student => {
      if (!projectStudent[student]) {
        projectStudent[student] = [];
      }
      projectStudent[student].push(project);
    });
  });

  Object.keys(projectStudent).forEach(student => {
    slugs.push({	
      params: { "projectStudent": `${student}` },
      props: { "student": student, "projects": projectStudent[student] }
    });
  });

  return slugs;  
}

// read to pass to ProjectSearch
const projects = await getCollection('projects');

// 2. For your template, you can get the entry directly from the prop
const { student } = Astro.props;

// Page title
let title = `Projects with ${student}`;
---
<TAPDefaultLayout title=`${title}`>

	<Crumbs pageType="student" pageUrl=`/students`/>

	<ProjectSearch client:load projectList={projects} filter={Astro.props}/>

</TAPDefaultLayout> 