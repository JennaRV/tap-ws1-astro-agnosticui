---
// Style Imports
import '../../styles/global.css';
import '@fontsource/source-sans-pro';
import '@fontsource/pixelify-sans';
import '@fontsource/ibm-plex-mono';
import '@fontsource/work-sans';
import '@fontsource/cormorant-garamond';
import '@fontsource/spectral';
import '@fontsource/crimson-pro';
import '@fontsource/alfa-slab-one';


// common.min.css is distributed with agnostic-react
// and agnostic-svelte too. But, since we're using all
// of these together, we only need to import global CSS
// once and in one place.
// common.min.css combines properties, resets, utilities
// import "agnostic-vue/dist/common.min.css";
// But!! Rob much prefers individual modular import ;)
import "agnostic-vue/dist/common.properties.min.css";
import "agnostic-vue/dist/common.resets.min.css";
import "agnostic-vue/dist/common.utilities.min.css";
import "agnostic-vue/dist/opinions.min.css";
import { Debug } from 'astro:components';

// Component Imports
import "agnostic-vue/dist/index.css";
import Card from "agnostic-vue";
import { Image } from "astro:assets";
import TAPHeader from '../../components/TAPHeader.vue';

// Read from conten collection
import { getCollection } from 'astro:content';
import Crumbs from "../../components/Crumbs.vue"
import ProjectSearch from '../../components/ProjectSearch.vue';
import Projects from '../projects.astro';

// 1. Generate a new path for every collection entry
//filter projects based on the route
// function filterProjects(year, semester /** 2016/fall*/){ 
// 	return projects.filter((project) => {project.data.year == year && project.data.semester == semester})
// }
const projects = await getCollection('projects');
export async function getStaticPaths() {
  const projects = await getCollection('projects');
  
  //projects.forEach((project) => console.log(project.data.year == 2023));   //year is number, semester is string
//   const filterProjects = (year, semester) =>{ return projects.filter((project) => project.data.year == year  && project.data.semester == semester)}
//   //console.log(filterProjects(2023));
//   const newProjects = projects.map(project => ({
	
//     params: { slug3: `${project.data.year}/${project.data.semester}`},
// 	props: {projs: filterProjects(project.data.year, project.data.semester), semester:project.data.semester }
//   })); 
//   //console.log(newProjects);
// 	return newProjects
return [];
  // TODO: add to list: years and semesters as search results pages; potentially add techs/ and students/ folders here or in the base
}

//for a loop of projects, match the year and semester provided


// Goal 1: Make it redirect to the projects.astro page, using the parameters as values for 


// Goal 2: Actually  
// 2. For your template, you can get the entry directly from the prop
const { slug3 } = Astro.params;
const {projs, semester} = Astro.props;
// const { Content } = await project.render();

// // BreadCrumb variables
//console.log(projs);
const projYear  = slug3;
// const  projSemester  = project.data.semester;
// const  projName  = project.data.title;

// Page title
let title = ` Outreach Projects - GGC Technology Ambassadors Program`;

---
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width">
	<title>{title}</title>

	<link rel="icon" type="image/x-icon" href="/favicon.ico" />

	<style>
		.projectImage {
			/*float: left;*/
			margin-right: 1em;
			width: clamp(25em, 50%, 45em);
			float: left;
			padding-bottom: 0.5em;
			padding-right: 0.5em;
		}

		.projectText {
			font-size: 1.125em; 
			text-align: left;
			width: clamp(15em, 45%, 45em);
			/*change these to flex-grow/shrink 
			width:720px; 
			float: right; 
			
			height: auto;  
			*/			
			vertical-align: bottom; 			
			display: inline-block;
			margin-bottom: 1em;
		}

		.projectText p {
			margin-bottom: 0.5em;
		}

		.body-prj h2 {
			margin-top: 2em;
		}
	</style>
	
</head>
<body class=body-prj>
	<main>
		<TAPHeader client:load />
		<Crumbs pageType="project" pageUrl=`/projects/${slug3}/`/>
		
	</main>
	<!-- <Debug {Astro.props} /> -->
	<ProjectSearch client:load projectList={projects} filter={Astro.props}/>
</body>
</html>